name: Tag and release

on:
  workflow_dispatch:

jobs:
  release:
    name: Prepare release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      do: ${{ steps.extract.outputs.do }}
    steps:
    - name: Checkout develop
      uses: actions/checkout@v4
      id: checkout
      with: 
        ref: develop
    - name: Extract version and try to create release
      id: extract
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        VERSION=$(grep '^ARG CODESERVER_VERSION=' Dockerfile | sed 's/^ARG CODESERVER_VERSION=//')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Check version doesn't exist
      id: check
      run: |
        gh release list | grep ${ steps.extract.output.version } || (echo  "Version ${ steps.extract.output.version } exists: STOP"; exit 1;)
        echo  "Version doesn't exists. Continue..."
        echo "do=nothing" >> $GITHUB_OUTPUT
    - name: Create release
      id: do-release
      run:
        gh release create v${VERSION} --generate-notes
        echo " Release created"
        echo "do=release" >> $GITHUB_OUTPUT

  post-release:
    needs: release
    name: Post Release
    if: needs.release.outputs.do == 'release'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      id: checkout-main
      with: 
        ref: main
        depth: 0 
    - name: Merge in main
      id: merge
      run: |
        git merge --squash develop
        git commit
        git push origin main
